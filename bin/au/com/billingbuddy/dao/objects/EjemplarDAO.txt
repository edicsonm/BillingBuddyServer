/**
 * 
 */
package co.com.pepoapp.dao;

import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import co.com.pepoapp.conexion.Cerrar;
import co.com.pepoapp.conexion.DefinitionConnectionMPOS;
import co.com.pepoapp.interfaz.IDAO;
import co.com.pepoapp.porlet.VO.EjemplarVO;
import co.com.pepoapp.porlet.VO.PersonaVO;
import co.com.pepoapp.porlet.VO.PropietarioVO;
import co.com.pepoapp.porlet.VO.RazaVO;

/**
 * @author Edicson Morales Torres
 * Ingeniero de Sistemas - Universidad de Pamplona - Colombia
 * @email edicsonm@gmail.com
 * 23/03/2014
 **/
public class EjemplarDAO extends DefinitionConnectionMPOS implements IDAO {

	/**
	 * 
	 */
	public EjemplarDAO() throws SQLException, Exception {
		super();
	}
	
	public EjemplarDAO(DefinitionConnectionMPOS aDefConn) throws SQLException, Exception {
		super(aDefConn.getConnection());
	}

	@Override
	public ArrayList<EjemplarVO> listar() throws SQLException {
		ArrayList<EjemplarVO> listaEjemplares = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = getConnection().prepareStatement("{call "+configuraciones.getString("ESQUEMA")+".Listar_Ejemplares()}");
			rs = pstmt.executeQuery();
			if (rs != null) {
				listaEjemplares = new ArrayList<EjemplarVO>();
				while (rs.next()) {
					EjemplarVO ejemplarVO = new EjemplarVO();
					ejemplarVO.setIdEjemplar(rs.getString("Ejem_ID"));
					ejemplarVO.setNombreEjemplar(rs.getString("Ejem_Nombre"));
					ejemplarVO.setRazaVO(new RazaVO());
					ejemplarVO.getRazaVO().setNombre(rs.getString("Raza_Nombre"));
					ejemplarVO.setSexo(rs.getString("Ejem_Sexo"));
					ejemplarVO.setColorDominante(rs.getString("Ejem_ColorDominante"));
					ejemplarVO.setFechaNacimiento(rs.getDate("Ejem_FechaNacimiento"));
					ejemplarVO.setDestinacion(rs.getString("Ejem_Destinacion"));
					ejemplarVO.setDescripcion(rs.getString("Ejem_Descripcion"));
//					ejemplarVO.setCarnetVacuna(new FileInputStream(rs.getBinaryStream("Ejem_CarnetVacuna")));
//					ejemplarVO.setIdEjemplar(rs.getString("Ejem_CartaSanidad"));
//					ejemplarVO.setIdEjemplar(rs.getString("Ejem_Foto"));
//					ejemplarVO.setIdEjemplar(rs.getString("Ejem_PolizaSeguro"));
					
					listaEjemplares.add(ejemplarVO);
				}
			}
		} catch (SQLException e) {
			throw e;
		} finally {
			Cerrar.PsRs(pstmt, rs);
		}
		return listaEjemplares;
	}
	
	public ArrayList<EjemplarVO> listarEjemplares(Object ob) throws SQLException {
		EjemplarVO ejemplarVO = (EjemplarVO)ob;
		ArrayList<EjemplarVO> listaEjemplares = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = getConnection().prepareStatement("{call "+configuraciones.getString("ESQUEMA")+".Listar_Ejemplares(?, ?, ?)}");
			pstmt.setString(1, ejemplarVO.getNombreEjemplar());
			pstmt.setString(2, ejemplarVO.getRazaVO().getNombre());
			pstmt.setString(3, ejemplarVO.getDestinacion());
			
			rs = pstmt.executeQuery();
			if (rs != null) {
				listaEjemplares = new ArrayList<EjemplarVO>();
				while (rs.next()) {
					ejemplarVO = new EjemplarVO();
					ejemplarVO.setIdEjemplar(rs.getString("Ejem_ID"));
					ejemplarVO.setNombreEjemplar(rs.getString("Ejem_Nombre"));
					ejemplarVO.setIdRaza(rs.getString("Raza_ID"));
					ejemplarVO.setRazaVO(new RazaVO());
					ejemplarVO.getRazaVO().setNombre(rs.getString("Raza_Nombre"));
					ejemplarVO.setSexo(rs.getString("Ejem_Sexo"));
					ejemplarVO.setColorDominante(rs.getString("Ejem_ColorDominante"));
					ejemplarVO.setFechaNacimiento(rs.getDate("Ejem_FechaNacimiento"));
					ejemplarVO.setDestinacion(rs.getString("Ejem_Destinacion"));
					ejemplarVO.setDescripcion(rs.getString("Ejem_Descripcion"));
					listaEjemplares.add(ejemplarVO);
				}
			}
		} catch (SQLException e) {
			ejemplarVO.setTipoError(errores.getString(String.valueOf(e.getErrorCode())));
			ejemplarVO.setCodigoError(String.valueOf(e.getErrorCode()));
			throw e;
		} finally {
			Cerrar.PsRs(pstmt, rs);
		}
		return listaEjemplares;
	}
	
	@Override
	public EjemplarVO listar(Object ob) throws SQLException {
		EjemplarVO ejemplarVO = (EjemplarVO)ob;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try {
			pstmt = getConnection().prepareStatement("{call "+configuraciones.getString("ESQUEMA")+".Listar_Detalle_Ejemplar( ? )}");
			pstmt.setString(1, ejemplarVO.getIdEjemplar());
			rs = pstmt.executeQuery();
			if (rs != null) {
				while (rs.next()) {
					
					Blob Ejem_CartaSanidad = rs.getBlob("Ejem_CartaSanidad");
					System.out.println("Ejem_CartaSanidad.length(): " + Ejem_CartaSanidad.length());
					
					ejemplarVO.setFoto(rs.getBlob("Ejem_Foto"));
					ejemplarVO.setPolizaSeguro(rs.getBlob("Ejem_PolizaSeguro"));
					ejemplarVO.setCarnetVacuna(rs.getBlob("Ejem_CarnetVacuna"));
					ejemplarVO.setCartaSanidad(rs.getBlob("Ejem_CartaSanidad"));
					
					System.out.println("1 --> " + ejemplarVO.getPolizaSeguro());
					System.out.println("1.1 --> " + ejemplarVO.getPolizaSeguro().length());
					
					System.out.println("2 --> " + ejemplarVO.getCarnetVacuna());
					System.out.println("2.1 --> " + ejemplarVO.getCarnetVacuna().length());
					
					System.out.println("3 --> " + ejemplarVO.getCartaSanidad());
					System.out.println("3.1 --> " + ejemplarVO.getCartaSanidad().length());
					
					ejemplarVO.setPropietarioVO(new PropietarioVO());
					ejemplarVO.getPropietarioVO().setPersonaVO(new PersonaVO());
					ejemplarVO.getPropietarioVO().getPersonaVO().setDocumentoIdentidad(rs.getString("Pers_DocumentoIdentidad"));
					ejemplarVO.getPropietarioVO().getPersonaVO().setNombre(rs.getString("Pers_Nombre"));
					ejemplarVO.getPropietarioVO().getPersonaVO().setApellidos(rs.getString("Pers_Apellidos"));
				}
			}
		} catch (SQLException e) {
			ejemplarVO.setTipoError(errores.getString(String.valueOf(e.getErrorCode())));
			ejemplarVO.setCodigoError(String.valueOf(e.getErrorCode()));
			throw e;
		} finally {
			Cerrar.PsRs(pstmt, rs);
		}
		return ejemplarVO;
	}

	@Override
	public Object detalle(Object ob) {
		return null;
	}

	@Override
	public int insertar(Object ob) throws SQLException {
		EjemplarVO ejemplarVO = (EjemplarVO)ob;
		CallableStatement cstmt = null;
		int status = 0;
		try {
			cstmt = getConnection().prepareCall("{call "+configuraciones.getString("ESQUEMA")+".Registrar_Ejemplar( ?, ? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )}");
			cstmt.setString(1, ejemplarVO.getNombreEjemplar());
			cstmt.setString(2, ejemplarVO.getIdRaza());
			cstmt.setString(3, ejemplarVO.getSexo());
			cstmt.setString(4, ejemplarVO.getColorDominante());
			cstmt.setDate(5, new java.sql.Date(ejemplarVO.getFechaNacimiento().getTime()));
			cstmt.setString(6, ejemplarVO.getDestinacion());
			cstmt.setString(7, ejemplarVO.getDescripcion());
			cstmt.setBlob(8, ejemplarVO.getCarnetVacuna());
			cstmt.setBlob(9, ejemplarVO.getCartaSanidad());
			cstmt.setBlob(10, ejemplarVO.getFoto());
			cstmt.setBlob(11, ejemplarVO.getPolizaSeguro());
			
//			cstmt.setBinaryStream(7, new FileInputStream(ejemplarVO.getCarnetVacuna()), (int)ejemplarVO.getCarnetVacuna().length());
//			cstmt.setBinaryStream(8, new FileInputStream(ejemplarVO.getCartaSanidad()), (int)ejemplarVO.getCartaSanidad().length());
//			cstmt.setBinaryStream(9, new FileInputStream(ejemplarVO.getFoto()), (int)ejemplarVO.getFoto().length());
//			cstmt.setBinaryStream(10, new FileInputStream(ejemplarVO.getPolizaSeguro()), (int)ejemplarVO.getPolizaSeguro().length());
			
			cstmt.setString(12, null);
			status = cstmt.executeUpdate();
			ejemplarVO.setIdEjemplar(cstmt.getString(12));
			ejemplarVO.getPropietarioVO().setIdEjemplar(cstmt.getString(12));
		} catch (SQLException e) {
			e.printStackTrace();
			ejemplarVO.setTipoError(errores.getString(String.valueOf(e.getErrorCode())));
			ejemplarVO.setCodigoError(String.valueOf(e.getErrorCode()));
			throw e;
		} finally {
			Cerrar.Cs(cstmt);
		}
		return status;
	}

	public int actualizar(Object ob) throws SQLException {
		EjemplarVO ejemplarVO = (EjemplarVO)ob;
		CallableStatement cstmt = null;
		int status = 0;
		try {
			cstmt = getConnection().prepareCall("{call "+configuraciones.getString("ESQUEMA")+".Actualizar_Ejemplar( ?, ? , ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)}");
			cstmt.setString(1, ejemplarVO.getIdEjemplar());
			cstmt.setString(2, ejemplarVO.getNombreEjemplar());
			cstmt.setString(3, ejemplarVO.getIdRaza());
			cstmt.setString(4, ejemplarVO.getSexo());
			cstmt.setString(5, ejemplarVO.getColorDominante());
			cstmt.setDate(6, new java.sql.Date(ejemplarVO.getFechaNacimiento().getTime()));
			cstmt.setString(7, ejemplarVO.getDestinacion());
			cstmt.setString(8, ejemplarVO.getDescripcion());
			cstmt.setBlob(9, ejemplarVO.getCarnetVacuna());
			cstmt.setBlob(10, ejemplarVO.getCartaSanidad());
			cstmt.setBlob(11, ejemplarVO.getFoto());
			cstmt.setBlob(12, ejemplarVO.getPolizaSeguro());
			cstmt.setInt(13, 0);
			cstmt.executeUpdate();
			status= cstmt.getInt(13);
		} catch (SQLException e) {
			e.printStackTrace();
			ejemplarVO.setTipoError(errores.getString(String.valueOf(e.getErrorCode())));
			ejemplarVO.setCodigoError(String.valueOf(e.getErrorCode()));
			throw e;
		} finally {
			Cerrar.Cs(cstmt);
		}
		return status;
	}

	@Override
	public int eliminar(Object ob) throws SQLException {
		EjemplarVO ejemplarVO = (EjemplarVO)ob;
		CallableStatement cstmt = null;
		int status = 0;
		try {
			cstmt = getConnection().prepareCall("{call "+configuraciones.getString("ESQUEMA")+".Eliminar_Ejemplar( ? )}");
			cstmt.setString(1, ejemplarVO.getIdEjemplar());
			status = cstmt.executeUpdate();
		} catch (SQLException e) {
			ejemplarVO.setTipoError(errores.getString(String.valueOf(e.getErrorCode())));
			ejemplarVO.setCodigoError(String.valueOf(e.getErrorCode()));
			e.printStackTrace();
			throw e;
		} finally {
			Cerrar.Cs(cstmt);
		}
		return status;
	}

}
